
module string_set where

import Prelude;

listInsertM : (a : sort 0) -> List a -> a ->
              SpecM Void VoidEvRetType emptyFunStack (List a);
listInsertM a l s =
  retS Void VoidEvRetType emptyFunStack (List a) (Cons a s l);

listRemoveM : (a : sort 0) -> (a -> a -> Bool) -> List a -> a ->
              SpecM Void VoidEvRetType emptyFunStack (List a * a);
listRemoveM a test_eq l s =
  retS
    Void VoidEvRetType emptyFunStack
    (List a * a)
    (List__rec
      a (\ (_:List a) -> List a)
      (Nil a)
      (\ (s':a) (_:List a) (rec:List a) ->
         ite (List a) (test_eq s s') rec (Cons a s' rec))
      l,
     s);

----------------------------------------------------------------------
-- Helper defs for Heapster examples

stringList : sort 0;
stringList = List String;

stringListInsertM : List String -> String ->
                    SpecM Void VoidEvRetType emptyFunStack (List String);
stringListInsertM l s =
  retS Void VoidEvRetType emptyFunStack (List String) (Cons String s l);

stringListRemoveM : List String -> String ->
                    SpecM Void VoidEvRetType emptyFunStack (stringList * String);
stringListRemoveM l s =
  retS
    Void VoidEvRetType emptyFunStack
    (stringList * String)
    (List__rec
      String (\ (_:List String) -> List String)
      (Nil String)
      (\ (s':String) (_:List String) (rec:List String) ->
         ite (List String) (equalString s s') rec (Cons String s' rec))
      l,
     s);
