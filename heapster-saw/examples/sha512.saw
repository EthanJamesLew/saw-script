enable_experimental;
env <- heapster_init_env "SHA512" "sha512.bc";

heapster_set_debug_level env 1;

heapster_define_perm env "int64" " " "llvmptr 64" "exists x:bv 64.eq(llvmword(x))";
heapster_define_perm env "int8" " " "llvmptr 8" "exists x:bv 8.eq(llvmword(x))";

heapster_typecheck_fun env "simpl0" "(num:bv 64).arg0:array(0,<num,*1,[(W,0,8) |-> int8<>]), arg1:eq(llvmword(num)) -o arg0:array(0,<num,*1,[(W,0,8) |-> int8<>]), arg1:true, ret:int64<>";

// heapster_assume_fun env "SIMPL1_CRYPTO_load_u64_be" "(rw:rwmodality, l1:lifetime, l2:lifetime, b:llvmblock 64).arg0:[l2]memblock(rw,0,8,eqsh(b)) -o arg0:[l2]memblock(rw,0,8,eqsh(b)), ret:[l1]memblock(W,0,8,eqsh(b))" "\\ (_:#()) -> returnM (#() * #() * #()) ((),(),())";

// heapster_typecheck_fun env "sha512_block_data_order_simpl1" "(num:bv 64).arg0:array(0,<1,*8,[(W,0) |-> int64<>]), arg1:array(0,<2*num,*8,[(W,0) |-> int64<>]), arg2:eq(llvmword(num)) -o arg0:array(0,<1,*8,[(W,0) |-> int64<>]), arg1:array(0,<2*num,*8,[(W,0) |-> int64<>]), arg2:true, ret:true";

heapster_export_coq env "sha512_gen.v";