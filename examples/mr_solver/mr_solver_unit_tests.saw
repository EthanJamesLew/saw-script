enable_experimental;

let eq_bool b1 b2 =
  if b1 then
    if b2 then true else false
  else
    if b2 then false else true;

let fail = do { print "Test failed"; exit 1; };
let run_test name test expected =
  do { if expected then print (str_concat "Test: " name) else
         print (str_concat (str_concat "Test: " name) " (expecting failure)");
       actual <- test;
       if eq_bool actual expected then print "Test passed\n" else
         do { print "Test failed\n"; exit 1; }; };

// The constant 0 function const0 x = 0
let ret0_core = "retS VoidEv emptyFunStack (Vec 64 Bool) (bvNat 64 0)";
let const0_core = str_concat "\\ (_:Vec 64 Bool) -> " ret0_core;
const0 <- parse_core const0_core;

// The constant 1 function const1 x = 1
let const1_core = "\\ (_:Vec 64 Bool) -> retS VoidEv emptyFunStack (Vec 64 Bool) (bvNat 64 1)";
const1 <- parse_core const1_core;

// const0 <= const0
run_test "const0 |= const0" (mr_solver_query const0 const0) true;
// (using prove_refinement tactic)
let const0_refines =
  str_concats ["(x:Vec 64 Bool) -> refinesS_eq VoidEv emptyFunStack (Vec 64 Bool) ",
               "((", const0_core, ") x) ", "((", const0_core, ") x)"];
prove_extcore prove_refinement (parse_core const0_refines);

// The function test_fun0 from the prelude = const0
test_fun0 <- parse_core "test_fun0";
run_test "const0 |= test_fun0" (mr_solver_query const0 test_fun0) true;
// (using prove_refinement tactic)
let const0_test_fun0_refines =
  str_concats ["(x:Vec 64 Bool) -> refinesS_eq VoidEv emptyFunStack (Vec 64 Bool) ",
               "((", const0_core, ") x) ", "(test_fun0 x)"];
prove_extcore prove_refinement (parse_core const0_test_fun0_refines);

// not const0 <= const1
run_test "const0 |= const1" (mr_solver_query const0 const1) false;
// (using prove_refinement tactic - fails as expected)
// let const0_const1_refines =
//   str_concats ["(x:Vec 64 Bool) -> refinesS_eq VoidEv emptyFunStack (Vec 64 Bool) ",
//                "((", const0_core, ") x) ", "((", const1_core, ") x)"];
// prove_extcore prove_refinement (parse_core const0_const1_refines);

// The function test_fun1 from the prelude = const1
test_fun1 <- parse_core "test_fun1";
run_test "const1 |= test_fun1" (mr_solver_query const1 test_fun1) true;
run_test "const0 |= test_fun1" (mr_solver_query const0 test_fun1) false;
// (using prove_refinement tactic)
let const1_test_fun1_refines =
  str_concats ["(x:Vec 64 Bool) -> refinesS_eq VoidEv emptyFunStack (Vec 64 Bool) ",
               "((", const1_core, ") x) ", "(test_fun1 x)"];
prove_extcore prove_refinement (parse_core const1_test_fun1_refines);
// (using prove_refinement tactic - fails as expected)
// let const0_test_fun1_refines =
//   str_concats ["(x:Vec 64 Bool) -> refinesS_eq VoidEv emptyFunStack (Vec 64 Bool) ",
//                "((", const0_core, ") x) ", "(test_fun1 x)"];
// prove_extcore prove_refinement (parse_core const0_test_fun1_refines);

// ifxEq0 x = If x == 0 then x else 0; should be equal to 0
let ifxEq0_core = "\\ (x:Vec 64 Bool) -> \
                       \ ite (SpecM VoidEv emptyFunStack (Vec 64 Bool)) \
                       \     (bvEq 64 x (bvNat 64 0)) \
                       \     (retS VoidEv emptyFunStack (Vec 64 Bool) x) \
                       \     (retS VoidEv emptyFunStack (Vec 64 Bool) (bvNat 64 0))";
ifxEq0 <- parse_core ifxEq0_core;

// ifxEq0 <= const0
run_test "ifxEq0 |= const0" (mr_solver_query ifxEq0 const0) true;
// (using prove_refinement tactic)
let ifxEq0_const0_refines =
  str_concats ["(x:Vec 64 Bool) -> refinesS_eq VoidEv emptyFunStack (Vec 64 Bool) ",
               "((", ifxEq0_core, ") x) ", "((", const0_core, ") x)"];
prove_extcore prove_refinement (parse_core ifxEq0_const0_refines);

// not ifxEq0 <= const1
run_test "ifxEq0 |= const1" (mr_solver_query ifxEq0 const1) false;
// (using prove_refinement tactic - fails as expected)
// let ifxEq0_const1_refines =
//   str_concats ["(x:Vec 64 Bool) -> refinesS_eq VoidEv emptyFunStack (Vec 64 Bool) ",
//                "((", ifxEq0_core, ") x) ", "((", const1_core, ") x)"];
// prove_extcore prove_refinement (parse_core ifxEq0_const1_refines);

// noErrors1 x = existsS x. retS x
let noErrors1_core =
  "\\ (_:Vec 64 Bool) -> existsS VoidEv emptyFunStack (Vec 64 Bool)";
noErrors1 <- parse_core noErrors1_core;

// const0 <= noErrors
run_test "noErrors1 |= noErrors1" (mr_solver_query noErrors1 noErrors1) true;
// (using prove_refinement tactic)
let noErrors1_refines =
  str_concats ["(x:Vec 64 Bool) -> refinesS_eq VoidEv emptyFunStack (Vec 64 Bool) ",
               "((", noErrors1_core, ") x) ", "((", noErrors1_core, ") x)"];
prove_extcore prove_refinement (parse_core noErrors1_refines);

// const1 <= noErrors
run_test "const1 |= noErrors1" (mr_solver_query const1 noErrors1) true;
// (using prove_refinement tactic)
let const1_noErrors1_refines =
  str_concats ["(x:Vec 64 Bool) -> refinesS_eq VoidEv emptyFunStack (Vec 64 Bool) ",
               "((", const1_core, ") x) ", "((", noErrors1_core, ") x)"];
prove_extcore prove_refinement (parse_core const1_noErrors1_refines);

// noErrorsRec1 _ = orS (existsM x. returnM x) (noErrorsRec1 x)
// Intuitively, this specifies functions that either return a value or loop
let noErrorsRec1_core =
  "fixS VoidEv emptyFunStack (Vec 64 Bool) (\\ (_:Vec 64 Bool) -> Vec 64 Bool) \
      \ (\\ (f: fixSFun VoidEv emptyFunStack \
                      \ (Vec 64 Bool) (\\ (_:Vec 64 Bool) -> Vec 64 Bool)) \
          \ (x:Vec 64 Bool) -> \
          \ orS VoidEv (fixSStack (Vec 64 Bool) \
                                \ (\\ (_:Vec 64 Bool) -> Vec 64 Bool)) \
              \ (Vec 64 Bool) \
              \ (existsS VoidEv (fixSStack (Vec 64 Bool) \
                                         \ (\\ (_:Vec 64 Bool) -> Vec 64 Bool)) \
                         \ (Vec 64 Bool)) \
              \ (f x))";
noErrorsRec1 <- parse_core noErrorsRec1_core;

// loop x = loop x
let loop1_core =
  "fixS VoidEv emptyFunStack (Vec 64 Bool) (\\ (_:Vec 64 Bool) -> Vec 64 Bool) \
      \ (\\ (f: fixSFun VoidEv emptyFunStack \
                      \ (Vec 64 Bool) (\\ (_:Vec 64 Bool) -> Vec 64 Bool)) \
          \ (x:Vec 64 Bool) -> f x)";
loop1 <- parse_core loop1_core;

// loop1 <= noErrorsRec1
run_test "loop1 |= noErrorsRec1" (mr_solver_query loop1 noErrorsRec1) true;
// (using prove_refinement tactic)
let loop1_noErrorsRec1_refines =
  str_concats ["(x:Vec 64 Bool) -> refinesS_eq VoidEv emptyFunStack (Vec 64 Bool) ",
               "((", loop1_core, ") x) ", "((", noErrorsRec1_core, ") x)"];
prove_extcore prove_refinement (parse_core loop1_noErrorsRec1_refines);
