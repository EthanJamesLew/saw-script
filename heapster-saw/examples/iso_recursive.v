
(** Mandatory imports from saw-core-coq *)
From Coq Require Import Lists.List.
From Coq Require Import String.
From Coq Require Import Vectors.Vector.
From CryptolToCoq Require Import SAWCoreScaffolding.
From CryptolToCoq Require Import SAWCoreVectorsAsCoqVectors.
Import ListNotations.

(** Post-preamble section specified by you *)
From CryptolToCoq Require Import SAWCorePrelude.

(** Code generated by saw-core-coq *)

Module iso_recursive.

Definition List_IRTTyVars : forall (e0 : Type), @SAWCorePrelude.ListSort :=
  fun (e0 : Type) => @SAWCorePrelude.LS_Cons e0 (@SAWCorePrelude.LS_Nil).

Definition List_IRTDesc : forall (e0 : Type), @SAWCorePrelude.IRTDesc (@List_IRTTyVars e0) :=
  fun (e0 : Type) => @SAWCorePrelude.IRT_mu (@List_IRTTyVars e0) (@SAWCorePrelude.IRT_Either (@List_IRTTyVars e0) (@SAWCorePrelude.IRT_unit (@List_IRTTyVars e0)) (@SAWCorePrelude.IRT_prod (@List_IRTTyVars e0) (@SAWCorePrelude.IRT_varT (@List_IRTTyVars e0) 0) (@SAWCorePrelude.IRT_prod (@List_IRTTyVars e0) (@SAWCorePrelude.IRT_varD (@List_IRTTyVars e0) 0) (@SAWCorePrelude.IRT_unit (@List_IRTTyVars e0))))).

Definition List_IRT : forall (e0 : Type), Type :=
  fun (e0 : Type) => @SAWCorePrelude.IRT (@List_IRTTyVars e0) (@SAWCorePrelude.IRTs_Nil (@List_IRTTyVars e0)) (@List_IRTDesc e0).

Definition foldList_IRT : forall (e0 : Type), forall (p0 : @SAWCorePrelude.Either unit (prod e0 (prod (@List_IRT e0) unit))), @List_IRT e0 :=
  fun (e0 : Type) => @SAWCorePrelude.foldIRT (@List_IRTTyVars e0) (@SAWCorePrelude.IRTs_Nil (@List_IRTTyVars e0)) (@List_IRTDesc e0).

Definition unfoldList_IRT : forall (e0 : Type), forall (p0 : @List_IRT e0), @SAWCorePrelude.Either unit (prod e0 (prod (@List_IRT e0) unit)) :=
  fun (e0 : Type) => @SAWCorePrelude.unfoldIRT (@List_IRTTyVars e0) (@SAWCorePrelude.IRTs_Nil (@List_IRTTyVars e0)) (@List_IRTDesc e0).

Definition ListS_IRTTyVars : forall (e0 : Type), @SAWCorePrelude.ListSort :=
  fun (e0 : Type) => @SAWCorePrelude.LS_Cons e0 (@SAWCorePrelude.LS_Nil).

Definition ListS_IRTDesc : forall (e0 : Type), @SAWCorePrelude.IRTDesc (@ListS_IRTTyVars e0) :=
  fun (e0 : Type) => @SAWCorePrelude.IRT_mu (@ListS_IRTTyVars e0) (@SAWCorePrelude.IRT_Either (@ListS_IRTTyVars e0) (@SAWCorePrelude.IRT_unit (@ListS_IRTTyVars e0)) (@SAWCorePrelude.IRT_prod (@ListS_IRTTyVars e0) (@SAWCorePrelude.IRT_unit (@ListS_IRTTyVars e0)) (@SAWCorePrelude.IRT_prod (@ListS_IRTTyVars e0) (@SAWCorePrelude.IRT_varT (@ListS_IRTTyVars e0) 0) (@SAWCorePrelude.IRT_varD (@ListS_IRTTyVars e0) 0)))).

Definition ListS_IRT : forall (e0 : Type), Type :=
  fun (e0 : Type) => @SAWCorePrelude.IRT (@ListS_IRTTyVars e0) (@SAWCorePrelude.IRTs_Nil (@ListS_IRTTyVars e0)) (@ListS_IRTDesc e0).

Definition foldListS_IRT : forall (e0 : Type), forall (p0 : @SAWCorePrelude.Either unit (prod unit (prod e0 (@ListS_IRT e0)))), @ListS_IRT e0 :=
  fun (e0 : Type) => @SAWCorePrelude.foldIRT (@ListS_IRTTyVars e0) (@SAWCorePrelude.IRTs_Nil (@ListS_IRTTyVars e0)) (@ListS_IRTDesc e0).

Definition unfoldListS_IRT : forall (e0 : Type), forall (p0 : @ListS_IRT e0), @SAWCorePrelude.Either unit (prod unit (prod e0 (@ListS_IRT e0))) :=
  fun (e0 : Type) => @SAWCorePrelude.unfoldIRT (@ListS_IRTTyVars e0) (@SAWCorePrelude.IRTs_Nil (@ListS_IRTTyVars e0)) (@ListS_IRTDesc e0).

Definition is_elem__tuple_fun : @CompM.lrtTupleType (@CompM.LRT_Cons (@CompM.LRT_Fun (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool)) (fun (arg0 : @SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool)) => @CompM.LRT_Fun (@List_IRT (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool))) (fun (perm0 : @List_IRT (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool))) => @CompM.LRT_Ret (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool))))) (@CompM.LRT_Nil)) :=
  @CompM.multiFixM (@CompM.LRT_Cons (@CompM.LRT_Fun (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool)) (fun (arg0 : @SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool)) => @CompM.LRT_Fun (@List_IRT (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool))) (fun (perm0 : @List_IRT (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool))) => @CompM.LRT_Ret (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool))))) (@CompM.LRT_Nil)) (fun (is_elem : @CompM.lrtToType (@CompM.LRT_Fun (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool)) (fun (arg0 : @SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool)) => @CompM.LRT_Fun (@List_IRT (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool))) (fun (perm0 : @List_IRT (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool))) => @CompM.LRT_Ret (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool)))))) => pair (fun (e0 : @SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool)) (p0 : @List_IRT (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool))) => @CompM.letRecM (@CompM.LRT_Nil) (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool)) tt (@SAWCorePrelude.either unit (prod (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool)) (prod (@List_IRT (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool))) unit)) (CompM (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool))) (fun (x_left0 : unit) => @returnM CompM _ (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool)) (intToBv 64 0%Z)) (fun (x_right0 : prod (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool)) (prod (@List_IRT (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool))) unit)) => if @SAWCoreScaffolding.not (@SAWCorePrelude.bvEq 1 (if @SAWCorePrelude.bvEq 64 (SAWCoreScaffolding.fst x_right0) e0 then intToBv 1 (-1)%Z else intToBv 1 0%Z) (intToBv 1 0%Z)) then @returnM CompM _ (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool)) (intToBv 64 1%Z) else @bindM CompM _ (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool)) (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool)) (is_elem e0 (SAWCoreScaffolding.fst (SAWCoreScaffolding.snd x_right0))) (fun (call_ret_val : @SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool)) => @returnM CompM _ (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool)) call_ret_val)) (@unfoldList_IRT (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool)) p0))) tt).

Definition is_elem : @CompM.lrtToType (@CompM.LRT_Fun (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool)) (fun (arg0 : @SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool)) => @CompM.LRT_Fun (@List_IRT (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool))) (fun (perm0 : @List_IRT (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool))) => @CompM.LRT_Ret (@SAWCoreVectorsAsCoqVectors.Vec 64 (@SAWCoreScaffolding.Bool))))) :=
  SAWCoreScaffolding.fst is_elem__tuple_fun.

End iso_recursive.
