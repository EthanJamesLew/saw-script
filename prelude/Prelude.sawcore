-- Copyright   : Galois, Inc. 2012-2014
-- License     : BSD3
-- Maintainer  : jhendrix@galois.com

module Prelude where

-- Grammar for the core prelude types.
--
-- We use double colons "::" to represent the type constraint on the core symbols.
--   e.g., "Bool :: sort 0" indicates "Bool" has type "sort 0"
-- Functions use "->" to separate arguments from result.
--   e.g., "f :: Bool -> Bool -> Bool"indicates "f" is a binary operation on Booleans.
--
-- Single colons ":" are used for for scoping variables to be used in subsequent arguments.
--   "f :: n : Integer -> Signed n -> Signed n"
-- This  indicates "f" is a function that takes an integer argument "n", and returns a function
-- that takes "n"-bit signed integer and returns another "n"-bit signed integer.
--
-- We prefix the parameter with a single question mark (e.g., "?(n : Integer)") to indicate
-- the parameter is not passed explicitly, but should be inferred by type unification.
--
-- We prefix the parameter with two question marks (e.g., "??(Ord a)") to indicate the
-- parameter is not passed explicitly, but should be obtained by finding a unique term with
-- that type in the surrounding context.  If there are multiple such terms, then fail.
--
-- We use a parameter with three question marks (e.g., "???(assert (eq x y))") to denote
-- parameters that are not explicitly passed, but must be found to show that the expression
-- is well formed.  This is used to ensure the index is valid when reading or updating an array.


id :: (a :: sort 0) -> a -> a;
id _ x = x;

--------------------------------------------------------------------------------
-- The Unit type
data TUnit :: sort 0 where {
    Unit :: TUnit;
  }

--------------------------------------------------------------------------------
-- Equality proofs.

data Eq :: (t :: sort 1) -> t -> t -> sort 1 where {
    Refl :: (u :: sort 1) -> (x :: u) -> Eq u x x;
  }

trans :: (a :: sort 1) -> (x y z :: a) -> Eq a x y -> Eq a y z -> Eq a x z;
trans _ _ _ _ (Refl _ _) eq = eq;

sym :: (a :: sort 1) -> (x y :: a) -> Eq a x y -> Eq a y x;
sym _ _ _ (Refl a x) = Refl a x;

-- Unchecked assertion that two types are equal.
axiom unsafeAssert :: (a :: sort 1) -> (x :: a) -> (y :: a) -> Eq a x y;

coerce :: (a b :: sort 0) -> Eq (sort 0) a b -> a -> b;
coerce _ _ (Refl _ _) x = x;

coerce_same :: (a :: sort 0) -> (q :: Eq (sort 0) a a) -> (x :: a) -> Eq a (coerce a a q x) x;
coerce_same a (Refl _ _) x = Refl a x;

rcoerce :: (a b :: sort 0) -> Eq (sort 0) a b -> b -> a;
rcoerce a b q = coerce b a (sym (sort 0) a b q);

rcoerce_same :: (a :: sort 0) -> (q :: Eq (sort 0) a a) -> (x :: a) -> Eq a (rcoerce a a q x) x;
rcoerce_same a q x = coerce_same a (sym (sort 0) a a q) x;

unsafeCoerce :: (a b :: sort 0) -> a -> b;
unsafeCoerce a b = coerce a b (unsafeAssert (sort 0) a b);

unsafeCoerce_same :: (a :: sort 0) -> (x :: a) -> Eq a (unsafeCoerce a a x) x;
unsafeCoerce_same a x = coerce_same a (unsafeAssert (sort 0) a a) x;

piCong0 :: (r x y :: sort 0) -> Eq (sort 0) x y -> (Eq (sort 0) (x -> r) (y -> r));
piCong0 r _ _ (Refl _ tp) = Refl (sort 0) (tp -> r);

piCong1 :: (r x y :: sort 0) -> Eq (sort 0) x y -> (Eq (sort 0) (r -> x) (r -> y));
piCong1 r _ _ (Refl _ tp) = Refl (sort 0) (r -> tp);

--------------------------------------------------------------------------------
-- Booleans
data Bool :: sort 0 where {
    True :: Bool;
    False :: Bool;
  }

not :: Bool -> Bool;
not (True) = False;
not (False) = True;

and :: Bool -> Bool -> Bool;
and (True) b = b;
and (False) b = False;

or :: Bool -> Bool -> Bool;
or (True) b = True;
or (False) b = b;

xor :: Bool -> Bool -> Bool;
xor (True) b = not b;
xor (False) b = b;

implies :: Bool -> Bool -> Bool;
implies a b = or (not a) b;

boolEq :: Bool -> Bool -> Bool;
boolEq True b = b;
boolEq False b = not b;

-- Could be derived from data declaration.
ite :: ?(a :: sort 1) -> Bool -> a -> a -> a;
ite _ (True)  t _ = t;
ite _ (False) _ f = f;

-- Rewrite rules for booleans.

not_not :: (x :: Bool) -> Eq Bool (not (not x)) x;
not_not True = Refl Bool True;
not_not False = Refl Bool False;

and_True :: (x :: Bool) -> Eq Bool (and x True) x;
and_True True = Refl Bool True;
and_True False = Refl Bool False;

and_False :: (x :: Bool) -> Eq Bool (and x False) False;
and_False True = Refl Bool False;
and_False False = Refl Bool False;

and_True2 :: (x :: Bool) -> Eq Bool (and True x) x;
and_True2 True = Refl Bool True;
and_True2 False = Refl Bool False;

and_False2 :: (x :: Bool) -> Eq Bool (and False x) False;
and_False2 True = Refl Bool False;
and_False2 False = Refl Bool False;

and_assoc :: (x y z :: Bool) -> Eq Bool (and x (and y z)) (and (and x y) z);
and_assoc True y z = Refl Bool (and y z);
and_assoc False _ _ = Refl Bool False;

and_idem :: (x :: Bool) -> Eq Bool (and x x) x;
and_idem True = Refl Bool True;
and_idem False = Refl Bool False;

or_True :: (x :: Bool) -> Eq Bool (or x True) True;
or_True True  = Refl Bool True;
or_True False = Refl Bool True;

or_False :: (x :: Bool) -> Eq Bool (or x False) x;
or_False True  = Refl Bool True;
or_False False = Refl Bool False;

or_True2 :: (x :: Bool) -> Eq Bool (or True x) True;
or_True2 True  = Refl Bool True;
or_True2 False = Refl Bool True;

or_False2 :: (x :: Bool) -> Eq Bool (or False x) x;
or_False2 True  = Refl Bool True;
or_False2 False = Refl Bool False;

or_assoc :: (x y z :: Bool) -> Eq Bool (or x (or y z)) (or (or x y) z);
or_assoc True  _ _ = Refl Bool True;
or_assoc False y z = Refl Bool (or y z);

or_idem :: (x :: Bool) -> Eq Bool (and x x) x;
or_idem True = Refl Bool True;
or_idem False = Refl Bool False;

not_or :: (x y :: Bool) -> Eq Bool (not (or x y)) (and (not x) (not y));
not_or True _ = Refl Bool False;
not_or False y = Refl Bool (not y);

not_and :: (x y :: Bool) -> Eq Bool (not (and x y)) (or (not x) (not y));
not_and True y = Refl Bool (not y);
not_and False _ = Refl Bool True;

ite_not :: (a :: sort 1) -> (b :: Bool) -> (x y :: a) -> Eq a (ite a (not b) x y) (ite a b y x);
ite_not a True _ y = Refl a y;
ite_not a False x _ = Refl a x;

ite_nest1 :: (a :: sort 1) -> (b :: Bool) -> (x y z :: a) -> Eq a (ite a b x (ite a b y z)) (ite a b x z);
ite_nest1 a True x y z = Refl a x;
ite_nest1 a False x y z = Refl a z;

ite_nest2 :: (a :: sort 1) -> (b :: Bool) -> (x y z :: a) -> Eq a (ite a b (ite a b x y) z) (ite a b x z);
ite_nest2 a True x y z = Refl a x;
ite_nest2 a False x y z = Refl a z;

axiom ite_bit :: (b :: Bool) -> (c :: Bool) -> (d :: Bool) -> Eq Bool (ite Bool b c d) (and (or (not b) c) (or b d));
axiom ite_bit_false_1 :: (b :: Bool) -> (c :: Bool) -> Eq Bool (ite Bool b False c) (and (not b) c);
axiom ite_bit_true_1 :: (b :: Bool) -> (c :: Bool) -> Eq Bool (ite Bool b True c) (or b c);

ite_fold_not :: (b :: Bool) -> Eq Bool (ite Bool b False True) (not b);
ite_fold_not True = Refl Bool False;
ite_fold_not False = Refl Bool True;

ite_eq :: (a :: sort 1) -> (b :: Bool) -> (x :: a) -> Eq a (ite a b x x) x;
ite_eq a True x = Refl a x;
ite_eq a False x = Refl a x;

ite_true :: (a :: sort 1) -> (x y :: a) -> Eq a (ite a True x y) x;
ite_true a x y = Refl a x;

ite_false :: (a :: sort 1) -> (x y :: a) -> Eq a (ite a False x y) y;
ite_false a x y = Refl a y;

axiom ite_eq_cong_1 :: (a :: sort 0)
              -> (b :: Bool) -> (x :: a) -> (y :: a) -> (z :: a)
              -> Eq Bool (eq a (ite a b x y) z) (ite Bool b (eq a x z) (eq a y z));
axiom ite_eq_cong_2 :: (a :: sort 0)
              -> (b :: Bool) -> (x :: a) -> (y :: a) -> (z :: a)
              -> Eq Bool (eq a z (ite a b x y)) (ite Bool b (eq a z x) (eq a z y));

or_triv1 :: (x :: Bool) -> Eq Bool (or x (not x)) True;
or_triv1 True = Refl Bool True;
or_triv1 False = Refl Bool True;

or_triv2 :: (x :: Bool) -> Eq Bool (or (not x) x) True;
or_triv2 True = Refl Bool True;
or_triv2 False = Refl Bool True;

and_triv1 :: (x :: Bool) -> Eq Bool (and x (not x)) False;
and_triv1 True = Refl Bool False;
and_triv1 False = Refl Bool False;

and_triv2 :: (x :: Bool) -> Eq Bool (and (not x) x) False;
and_triv2 True = Refl Bool False;
and_triv2 False = Refl Bool False;

--------------------------------------------------------------------------------
-- Boolean equality

primitive eq :: (a :: sort 0) -> a -> a -> Bool;

axiom eq_refl :: (a :: sort 0) -> (x :: a) -> Eq Bool (eq a x x) True;

axiom eq_Bool :: Eq (Bool -> Bool -> Bool) (eq Bool) boolEq;

--------------------------------------------------------------------------------
-- Overloaded operations

-- | Implemented as primitive;
-- Only defined for boolean, vector, stream, tuple, record, and function types
primitive zero :: (a :: sort 0) -> a;

-- | Implemented as primitive;
-- Only defined for boolean, vector, stream, tuple, record, and function types
primitive unary :: ((n :: Nat) -> bitvector n -> bitvector n)
                -> (Bool -> Bool)
                -> (a :: sort 0) -> a -> a;

-- | Implemented as primitive;
-- Only defined for boolean, vector, stream, tuple, record, and function types
primitive binary :: ((n :: Nat) -> bitvector n -> bitvector n -> bitvector n)
                 -> (Bool -> Bool -> Bool)
                 -> (a :: sort 0) -> a -> a -> a;

-- | Implemented as primitive;
-- Only defined for boolean, vector, tuple, and record types
primitive comparison :: (b :: sort 0)
           -> ((n :: Nat) -> bitvector n -> bitvector n -> b -> b)
           -> (Bool -> Bool -> b -> b)
           -> b
           -> (a :: sort 0) -> a -> a -> b;

cmpBvEq :: (n :: Nat) -> bitvector n -> bitvector n -> Bool -> Bool;
cmpBvEq n x y k = and (bvEq n x y) k;

cmpBvLt :: (n :: Nat) -> bitvector n -> bitvector n -> Bool -> Bool;
cmpBvLt n x y k = or (bvult n x y) (cmpBvEq n x y k);

cmpBoolEq :: Bool -> Bool -> Bool -> Bool;
cmpBoolEq x y k = and (boolEq x y) k;

cmpBoolLt :: Bool -> Bool -> Bool -> Bool;
cmpBoolLt x y k = or (and (not x) y) (cmpBoolEq x y k);

lt :: (a :: sort 0) -> a -> a -> Bool;
lt = comparison Bool cmpBvLt cmpBoolLt False;

axiom eq_binary_and :: Eq (Bool -> Bool -> Bool) (binary bvAnd and Bool) and;
axiom eq_binary_or :: Eq (Bool -> Bool -> Bool) (binary bvOr or Bool) or;
axiom eq_unary_not :: Eq (Bool -> Bool) (unary bvNot not Bool) not;

axiom eq_bvult :: (n :: Nat) -> Eq (Vec n Bool -> Vec n Bool -> Bool)
                             (lt (Vec n Bool))
                             (bvult n);

--------------------------------------------------------------------------------
-- Pairs

fst :: (a b :: sort 0) -> #(a, b) -> a;
fst a b (x, y) = x;

snd :: (a b :: sort 0) -> #(a, b) -> b;
snd a b (x, y) = y;

uncurry :: (a b c :: sort 0) -> (a -> b -> c) -> (#(a, b) -> c);
uncurry a b c f = (\(x :: #(a, b)) -> f (x.1) (x.2));

--------------------------------------------------------------------------------
-- Either

data Either :: sort 0 -> sort 0 -> sort 0 where {
    Left  :: (s t :: sort 0) -> s -> Either s t;
    Right :: (s t :: sort 0) -> t -> Either s t;
  }

either :: (a b c :: sort 0) -> (a -> c) -> (b -> c) -> Either a b -> c;
either a b c f g (Left _ _ x) = f x;
either a b c f g (Right _ _ y) = g y;

eitherCong0 :: (t x y :: sort 0) -> Eq (sort 0) x y -> Eq (sort 0) (Either x t) (Either y t);
eitherCong0 t x _ (Refl _ _) = Refl (sort 0) (Either x t);

eitherCong1 :: (t x y :: sort 0) -> Eq (sort 0) x y -> Eq (sort 0) (Either t x) (Either t y);
eitherCong1 t x _ (Refl _ _) = Refl (sort 0) (Either t x);

--------------------------------------------------------------------------------
-- Maybe

data Maybe :: sort 0 -> sort 0 where {
    Nothing :: (a :: sort 0) -> Maybe a;
    Just :: (a :: sort 0) -> a -> Maybe a;
  }

maybe :: (a b :: sort 0) -> b -> (a -> b) -> Maybe a -> b;
maybe _ _ z _ (Nothing _) = z;
maybe _ _ _ f (Just _ x) = f x;

--------------------------------------------------------------------------------
-- Nat

data Nat :: sort 0 where {
    Zero :: Nat;
    Succ :: Nat -> Nat;
  }

eqNat :: Nat -> Nat -> sort 1;
eqNat x y = Eq Nat x y;

eqNatSucc :: (x y :: Nat) -> eqNat x y -> eqNat (Succ x) (Succ y);
eqNatSucc _ _ (Refl _ x) = Refl Nat (Succ x);

eqNatPrec :: (x y :: Nat) -> eqNat (Succ x) (Succ y) -> eqNat x y;
eqNatPrec _ _ (Refl _ (Succ x)) = Refl Nat x;

-- | Addition
addNat :: Nat -> Nat -> Nat;
addNat Zero y = y;
addNat (Succ x) y = Succ (addNat x y);

eqNatAdd0 :: (x :: Nat) -> eqNat (addNat x 0) x;
eqNatAdd0 Zero = Refl Nat 0;
eqNatAdd0 (Succ x) = eqNatSucc (addNat x 0) x (eqNatAdd0 x);

eqNatAddS :: (x y :: Nat) -> eqNat (addNat x (Succ y)) (Succ (addNat x y));
eqNatAddS Zero y = Refl Nat (Succ y);
eqNatAddS (Succ x) y = eqNatSucc (addNat x (Succ y)) (Succ (addNat x y)) (eqNatAddS x y);

eqNatAddComm :: (x y :: Nat) -> eqNat (addNat x y) (addNat y x);
eqNatAddComm x Zero = eqNatAdd0 x;
eqNatAddComm x (Succ y) =
  trans Nat
        (addNat x (Succ y))
        (Succ (addNat x y))
        (Succ (addNat y x))
        (eqNatAddS x y)
        (eqNatSucc (addNat x y) (addNat y x) (eqNatAddComm x y));

addNat_assoc :: (x y z :: Nat) -> eqNat (addNat x (addNat y z)) (addNat (addNat x y) z);
addNat_assoc Zero y z = Refl Nat (addNat y z);
addNat_assoc (Succ x) y z =
    eqNatSucc (addNat x (addNat y z)) (addNat (addNat x y) z) (addNat_assoc x y z);

-- | Multiplication
mulNat :: Nat -> Nat -> Nat;
mulNat Zero y = 0;
mulNat (Succ x) y = addNat y (mulNat x y);

data NatDiff :: Nat -> sort 0 where {
    Greater :: (n::Nat) -> NatDiff n;
    DiffResult :: (d p :: Nat) -> NatDiff (addNat d p);
  }

primitive natSub :: (n :: Nat) -> Nat -> NatDiff n;

data NatOrdering :: (x y :: Nat) -> sort 0 where {
    LeNatOrd :: (x z :: Nat) -> NatOrdering x (addNat x z);
    GtNatOrd :: (x z :: Nat) -> NatOrdering (addNat x (Succ z)) x;
  }

axiom natOrderingCong1 :: (x y z :: Nat) -> eqNat x y -> NatOrdering x z -> NatOrdering y z;
axiom natOrderingCong2 :: (x y z :: Nat) -> eqNat x y -> NatOrdering z x -> NatOrdering z y;

succNatOrdering :: (x y :: Nat) -> NatOrdering x y -> NatOrdering (Succ x) (Succ y);
succNatOrdering _ _ (LeNatOrd x d) = LeNatOrd (Succ x) d;
succNatOrdering _ _ (GtNatOrd x d) = GtNatOrd (Succ x) d;

-- | Comparison
compareNat :: (x y :: Nat) -> NatOrdering x y;
compareNat Zero y = LeNatOrd Zero y;
compareNat (Succ x) Zero = GtNatOrd Zero x;
compareNat (Succ x) (Succ y) = succNatOrdering x y (compareNat x y);

equalNat :: Nat -> Nat -> Bool;
equalNat Zero Zero = True;
equalNat Zero (Succ _) = False;
equalNat (Succ _) Zero = False;
equalNat (Succ x) (Succ y) = equalNat x y;

ltNat :: Nat -> Nat -> Bool;
ltNat Zero Zero = False;
ltNat Zero (Succ _) = True;
ltNat (Succ _) Zero = False;
ltNat (Succ x) (Succ y) = ltNat x y;

-- | Subtraction
subNat :: Nat -> Nat -> Nat;
subNat x Zero = x;
subNat Zero (Succ y) = Zero;
subNat (Succ x) (Succ y) = subNat x y;

-- | Minimum
minNat :: Nat -> Nat -> Nat;
minNat Zero y = Zero;
minNat (Succ x) Zero = Zero;
minNat (Succ x) (Succ y) = Succ (minNat x y);

-- | Maximum
maxNat :: Nat -> Nat -> Nat;
maxNat Zero y = y;
maxNat (Succ x) Zero = Succ x;
maxNat (Succ x) (Succ y) = Succ (maxNat x y);

-- | Width(n) = 1 + floor(log_2(n))
primitive widthNat :: Nat -> Nat;

-- | Axiom: equalNat implements *the* equality on type Nat.
axiom eq_Nat :: Eq (Nat -> Nat -> Bool) (eq Nat) equalNat;

-- | Natural exponentiation
expNat :: Nat -> Nat -> Nat;
expNat b Zero = 1;
expNat b (Succ x) = mulNat b (expNat b x);

-- | Natural division and modulus
divModNat :: Nat -> Nat -> #(Nat, Nat);
divModNat x0 divisor =
   let { go :: Nat -> Nat -> #(Nat, Nat);
         go q x = go2 q x (subNat x divisor);
         go2 :: Nat -> Nat -> Nat -> #(Nat, Nat);
         go2 q x Zero = (q,x);
         go2 q x (Succ y) = go (Succ q) (Succ y);
       }
    in go Zero x0;

divNat :: Nat -> Nat -> Nat;
divNat x y = (divModNat x y).1;

modNat :: Nat -> Nat -> Nat;
modNat x y = (divModNat x y).2;

-- There are implicit constructors from integer literals.

-- Dependent pattern matching combinator for natural numbers
natCase :: (p :: Nat -> sort 0) -> p Zero -> ((n :: Nat) -> p (Succ n)) -> (n :: Nat) -> p n;
natCase p z s Zero = z;
natCase p z s (Succ n) = s n;

--------------------------------------------------------------------------------
-- "Vec n a" is an array of n elements, each with type "a".
data Vec :: Nat -> sort 0 -> sort 0 where { } -- primitive

primitive EmptyVec :: (a :: sort 0) -> Vec 0 a;
primitive ConsVec :: (a :: sort 0) -> a -> (n :: Nat) -> Vec n a -> Vec (Succ n) a;

-- Primitive function for generating an array.
primitive gen :: (n :: Nat) -> (a :: sort 0) -> (Nat -> a) -> Vec n a;

primitive at :: (n :: Nat) -> (a :: sort 0) -> Vec n a -> Nat -> a;
-- `at n a v i` has the precondition `ltNat i n`

upd :: (n :: Nat) -> (a :: sort 0) -> Vec n a -> Nat -> a -> Vec n a;
upd n a v j x = gen n a (\(i :: Nat) -> ite a (equalNat i j) x (at n a v i));
-- TODO: assertion that j < n

-- | Return true if two vectors are equal, given a comparison function
-- for elements.
vecEq :: (n :: Nat) -> (a :: sort 0) -> (a -> a -> Bool)
      -> Vec n a -> Vec n a -> Bool;
vecEq n a eqFn x y =
  foldr Bool Bool n and True (zipWith a a Bool eqFn n x y);

axiom eq_Vec :: (n :: Nat) -> (a :: sort 0)
       -> Eq (Vec n a -> Vec n a -> Bool) (eq (Vec n a)) (vecEq n a (eq a));

-- | Take a prefix of a vector.
take :: (a :: sort 0) -> (m n :: Nat) -> Vec (addNat m n) a -> Vec m a;
take a m n v = gen m a (\(i :: Nat) -> at (addNat m n) a v i);

vecCong :: (a :: sort 0) -> (m n :: Nat) -> Eq Nat m n -> Eq (sort 0) (Vec m a) (Vec n a);
vecCong a _ _ (Refl _ v) = Refl (sort 0) (Vec v a);

coerceVec :: (a :: sort 0) -> (m n :: Nat) -> Eq Nat m n -> Vec m a -> Vec n a;
coerceVec a m n q = coerce (Vec m a) (Vec n a) (vecCong a m n q);

-- | Simplify take  all elements from a vector.
axiom take0 :: (a :: sort 0)
       -> (m :: Nat)
       -> (v :: Vec (addNat m 0) a)
       -> Eq (Vec m a)
             (take a m 0 v)
             (coerceVec a (addNat m 0) m (eqNatAdd0 m) v);

-- | Returns a suffix of a vector after a given number of elements.
drop :: (a :: sort 0) -> (m n :: Nat) -> Vec (addNat m n) a -> Vec n a;
drop a m n v = gen n a (\(i :: Nat) -> at (addNat m n) a v (addNat m i));

-- | Simplify drop 0-elements from a vector.
axiom drop0 :: (a :: sort 0)
       -> (n :: Nat)
       -> (v :: Vec (addNat 0 n) a)
       -> Eq (Vec n a) (drop a 0 n v) v;

-- | Select a range [i,..,i+n] of values from the array.
slice :: (a :: sort 0)
      -> (m n o :: Nat)
      -> Vec (addNat (addNat m n) o) a -> Vec n a;
slice a m n o v = drop a m n (take a (addNat m n) o v);

-- | Defines a function that maps array elements from one range to another.
map :: (a b :: sort 0) -> (a -> b) -> (n :: Nat) -> Vec n a -> Vec n b;
map a b f n v = gen n b (\(i :: Nat) -> f (at n a v i));

-- | Defines a function that maps array elements from one range to another.
zipWith :: (a b c :: sort 0)
        -> (a -> b -> c)
        -> (n :: Nat) -> Vec n a -> Vec n b -> Vec n c;
zipWith a b c f n x y = gen n c (\(i :: Nat) -> f (at n a x i) (at n b y i));

-- replicate n x returns an array with n copies of x.
replicate :: (n :: Nat) -> ?(a :: sort 0) -> a -> Vec n a;
replicate n a x = gen n a (\(_ :: Nat) -> x);

-- | Create a vector of length 1.
single :: (a :: sort 0) -> a -> Vec 1 a;
single = replicate 1;

axiom at_single :: (a :: sort 0) -> (x :: a) -> (i :: Nat) -> Eq a (at 1 a (single a x) i) x;

-- Concatenate arrays together.
join  :: (m n :: Nat)
       -> (a :: sort 0)
       -> Vec m (Vec n a)
       -> Vec (mulNat m n) a;
join m n a v =
  gen (mulNat m n) a (\(i :: Nat) ->
    at n a (at m (Vec n a) v (divNat i n)) (modNat i n));

-- Split array into list
split :: ?(m n :: Nat) -> ?(a :: sort 0) -> Vec (mulNat m n) a -> Vec m (Vec n a);
split m n a v =
  gen m (Vec n a) (\(i :: Nat) ->
    gen n a (\(j :: Nat) ->
      at (mulNat m n) a v (addNat (mulNat i n) j)));

-- Append two arrays together.
append :: (m n :: Nat) -> (a :: sort 0) -> Vec m a -> Vec n a -> Vec (addNat m n) a;
append m n a x y =
  gen (addNat m n) a
    (\(i :: Nat) ->
      ite a (ltNat i m) (at m a x i) (at n a y (subNat i m)));

-- Rotate array to the left.
primitive rotateL :: (n :: Nat) -> (a :: sort 0) -> Vec n a -> Nat -> Vec n a;

-- Rotate array to the right.
primitive rotateR :: (n :: Nat) -> (a :: sort 0) -> Vec n a -> Nat -> Vec n a;

-- Zip together two lists (truncating the longer of the two).
primitive zip :: (a b :: sort 0) -> (m n :: Nat) -> Vec m a -> Vec n b -> Vec (minNat m n) #(a, b);

primitive foldr :: (a b :: sort 0) -> (n :: Nat) -> (a -> b -> b) -> b -> Vec n a -> b;

reverse :: (n :: Nat) -> (a :: sort 0) -> Vec n a -> Vec n a;
reverse n a xs = gen n a (\(i :: Nat) -> at n a xs (subNat (subNat n 1) i));

transpose :: (m n :: Nat) -> (a :: sort 0) -> Vec m (Vec n a) -> Vec n (Vec m a);
transpose m n a xss =
  gen n (Vec m a) (\(j :: Nat) ->
    gen m a (\(i :: Nat) -> at n a (at m (Vec n a) xss i) j));

joinLittleEndian  :: (m n :: Nat)
                  -> (a :: sort 0)
                  -> Vec m (Vec n a)
                  -> Vec (mulNat m n) a;
joinLittleEndian m n a v = join m n a (reverse m (Vec n a) v);

splitLittleEndian :: (m n :: Nat)
                  -> (a :: sort 0)
                  -> Vec (mulNat m n) a
                  -> Vec m (Vec n a);
splitLittleEndian m n a v = reverse m (Vec n a) (split m n a v);

--------------------------------------------------------------------------------
-- Bitvectors

-- | Bitvector operations expect the most-significant bit first.
bitvector :: (n :: Nat) -> sort 0;
bitvector n = Vec n Bool;

-- | Returns most-significant bit in a signed bitvector.
msb :: (x :: Nat) -> bitvector (Succ x) -> Bool;
msb x v = at (Succ x) Bool v 0;

-- | (bvNat x n) yields (n mod 2^x) as an x-bit vector.
primitive bvNat :: (x :: Nat) -> Nat -> bitvector x;

-- | Satisfies @bvNat n (bvToNat n x) = x@.
primitive bvToNat :: (n :: Nat) -> bitvector n -> Nat;

bvAt :: (n :: Nat) -> (a :: sort 0) -> (w :: Nat) -> Vec n a -> bitvector w
     -> a;
bvAt n a w xs i = at n a xs (bvToNat w i);

bvUpd :: (n :: Nat) -> (a :: sort 0) -> (w :: Nat) -> Vec n a -> bitvector w
      -> a -> Vec n a;
bvUpd n a w xs i y = upd n a xs (bvToNat w i) y;

primitive bvRotateL :: (n :: Nat) -> (a :: sort 0) -> (w :: Nat) -> Vec n a -> bitvector w -> Vec n a;
primitive bvRotateR :: (n :: Nat) -> (a :: sort 0) -> (w :: Nat) -> Vec n a -> bitvector w -> Vec n a;
primitive bvShiftL :: (n :: Nat) -> (a :: sort 0) -> (w :: Nat) -> a -> Vec n a -> bitvector w -> Vec n a;
primitive bvShiftR :: (n :: Nat) -> (a :: sort 0) -> (w :: Nat) -> a -> Vec n a -> bitvector w -> Vec n a;

primitive bvAdd :: (x :: Nat) -> bitvector x -> bitvector x -> bitvector x;

primitive bvAddWithCarry :: (x :: Nat) -> bitvector x -> bitvector x -> #(Bool, bitvector x);
--TODO: Implement this

primitive bvAddZeroL :: (n :: Nat) -> (x :: bitvector n) -> Eq (bitvector n) (bvAdd n (bvNat n 0) x) x;
primitive bvAddZeroR :: (n :: Nat) -> (x :: bitvector n) -> Eq (bitvector n) (bvAdd n x (bvNat n 0)) x;

primitive bvNeg :: (x :: Nat) -> bitvector x -> bitvector x;
primitive bvSub :: (x :: Nat) -> bitvector x -> bitvector x -> bitvector x;
primitive bvMul :: (x :: Nat) -> bitvector x -> bitvector x -> bitvector x;
--TODO

-- Unsigned division and remainder.
--
-- When the divisor is 0, bvUDiv returns a vector with all bits set.
-- (Equal to 2^x - 1), and bvURem returns the divident unchanged.
--
-- These two functions satisfy the property that:
--   bvAdd x (bvMul x (bvUDiv x u v) v) (bvURem x u v) == u
primitive bvUDiv :: (x :: Nat) -> bitvector x -> bitvector x -> bitvector x;
primitive bvURem :: (x :: Nat) -> bitvector x -> bitvector x -> bitvector x;
--TODO

-- Signed division.
-- When the divisor is 0, bvSDiv returns 2^x - 1 when the dividend
-- is non-negative, and -1 when the dividend is negative; bvSRem
-- returns the dividend unchanged.
--
-- Otherwise, the sign of the quotient is the exclusive xor of
-- the sign bit of the dividend and divisor; the remainder is negative
-- if the dividend is negative.

-- bvSDiv and bvSRem satisfy the property that:
--
--   bvAdd x (bvMul x (bvSDiv x u v) v) (bvSRem x u v) == u
primitive bvSDiv :: (x :: Nat) -> bitvector (Succ x) -> bitvector (Succ x) -> bitvector (Succ x);
primitive bvSRem :: (x :: Nat) -> bitvector (Succ x) -> bitvector (Succ x)
       -> bitvector (Succ x);
--TODO:

-- | Shift left by the given number of bits.
-- New bits are False.
primitive bvShl :: (w :: Nat) -> bitvector w -> Nat -> bitvector w;
--TODO

-- Logical right shift.  New bits are False.
primitive bvShr :: (w :: Nat) -> bitvector w -> Nat -> bitvector w;
--TODO

-- | Signed right shift.  New bits are equal to most-significant bit.
primitive bvSShr :: (w :: Nat) -> bitvector (Succ w) -> Nat -> bitvector (Succ w);
--TODO

-- | Zipwith specialized to bitvectors.
bvZipWith :: (Bool -> Bool -> Bool)
          -> (n :: Nat)
          -> bitvector n -> bitvector n -> bitvector n;
bvZipWith = zipWith Bool Bool Bool;

-- | Bitwise complement.
bvNot :: (n :: Nat) -> bitvector n -> bitvector n;
bvNot = map Bool Bool not;

-- | Pairwise conjunction, disjunction, and exclusive or.
bvAnd bvOr bvXor :: (n :: Nat) -> bitvector n -> bitvector n -> bitvector n;
bvAnd = bvZipWith and;
bvOr  = bvZipWith or;
bvXor = bvZipWith xor;

-- | Return true if two bitvectors are equal.
bvEq :: (n :: Nat) -> bitvector n -> bitvector n -> Bool;
bvEq n x y = vecEq n Bool boolEq x y;

-- | Axiom: bvEq implements *the* equality operation on bitvectors.
axiom eq_bitvector :: (n :: Nat) -> Eq (bitvector n -> bitvector n -> Bool) (eq (bitvector n)) (bvEq n);

axiom eq_VecBool :: (n :: Nat) -> Eq (Vec n Bool -> Vec n Bool -> Bool) (eq (Vec n Bool)) (bvEq n);

axiom eq_VecVec :: (n :: Nat) -> (m :: Nat) -> (a :: sort 0)
          -> Eq (Vec n (Vec m a) -> Vec n (Vec m a) -> Bool)
                (eq (Vec n (Vec m a)))
                (vecEq n (Vec m a) (eq (Vec m a)));

axiom equalNat_bv :: (n :: Nat) -> (x :: bitvector n) -> (i :: Nat) ->
               Eq Bool (equalNat i (bvToNat n x)) (bvEq n (bvNat n i) x);

-- | Return true if the bitvector is nonzero
bvNonzero :: (n :: Nat) -> bitvector n -> Bool;
bvNonzero n x = bvNe n x (bvNat n 0);

-- | Returns the bitvector 1 if the boolean is true,
--   and returns 0 otherwise
bvBool :: (n :: Nat) -> Bool -> bitvector n;
bvBool n b = ite (bitvector n) b (bvNat n 1) (bvNat n 0);

-- | Return true if two bitvectors are not equal.
bvNe :: (n :: Nat) -> bitvector n -> bitvector n -> Bool;
bvNe n x y = not (bvEq n x y);

-- | Unsigned and signed comparison functions.
primitive bvugt bvuge bvult bvule :: (n :: Nat) -> bitvector n -> bitvector n -> Bool;
primitive bvsgt bvsge bvslt bvsle :: (n :: Nat) -> bitvector n -> bitvector n -> Bool;

-- | Truncates a vector a smaller size.
-- msb implementation:
bvTrunc :: (x y :: Nat) -> bitvector (addNat x y) -> bitvector y;
bvTrunc = drop Bool;
-- lsb implementation:
-- bvTrunc :: (x y :: Nat) -> bitvector (addNat y x) -> bitvector y;
-- bvTrunc x y = take Bool y x;

-- | Perform a unsigned extension  of the bitvector.
-- @bvUExt x y v@ adds x bits of zeros to the most-significant bits of
-- the y-bit vector v.
-- msb implementation:
bvUExt :: (x y :: Nat) -> bitvector y -> bitvector (addNat x y);
bvUExt x y a = append x y ?Bool (replicate x Bool False) a;
-- lsb implementation:
-- bvUExt :: (x y :: Nat) -> bitvector y -> bitvector (addNat y x);
-- bvUExt x y a = append y x ?Bool a (replicate x Bool False);

-- | Perform a signed extension of the bitvector.
-- msb implementation:
bvSExt :: (x y :: Nat) -> bitvector (Succ y) -> bitvector (addNat x (Succ y));
bvSExt x y a = append x (Succ y) ?Bool (replicate x Bool (msb y a)) a;
-- lsb implementation:
-- bvSExt :: (x y :: Nat) -> bitvector (Succ y) -> bitvector (addNat (Succ y) x);
-- bvSExt x y a = append (Succ y) x ?Bool a (replicate x Bool (msb y a));

-- Polynomial operations

primitive bvPMul :: (m n :: Nat) -> bitvector m -> bitvector n
       -> bitvector (subNat (maxNat 1 (addNat m n)) 1);

primitive bvPDiv :: (m n :: Nat) -> bitvector m -> bitvector n -> bitvector m;

primitive bvPMod :: (m n :: Nat) -> bitvector m -> bitvector (Succ n) -> bitvector n;


--------------------------------------------------------------------------------
-- Infinite streams

data Stream :: sort 0 -> sort 0 where {
    MkStream :: (a :: sort 0) -> (Nat -> a) -> Stream a;
  }

streamGet :: (a :: sort 0) -> Stream a -> Nat -> a;
streamGet _ (MkStream _ s) i = s i;

streamConst :: (a :: sort 0) -> a -> Stream a;
streamConst a x = MkStream a (\(i :: Nat) -> x);

streamMap :: (a b :: sort 0) -> (a -> b) -> Stream a -> Stream b;
streamMap a b f xs = MkStream b (\(i :: Nat) -> f (streamGet a xs i));

streamMap2 :: (a b c :: sort 0) -> (a -> b -> c) -> Stream a -> Stream b -> Stream c;
streamMap2 a b c f xs ys = MkStream c (\(i :: Nat) -> f (streamGet a xs i) (streamGet b ys i));

streamTake :: (a :: sort 0) -> (n :: Nat) -> Stream a -> Vec n a;
streamTake a n xs = gen n a (\(i :: Nat) -> streamGet a xs i);

streamDrop :: (a :: sort 0) -> (n :: Nat) -> Stream a -> Stream a;
streamDrop a n xs = MkStream a (\(i :: Nat) -> streamGet a xs (addNat n i));

streamAppend :: (a :: sort 0) -> (n :: Nat) -> Vec n a -> Stream a -> Stream a;
streamAppend a n xs ys =
  MkStream a (\(i :: Nat) ->
    ite a (ltNat i n) (at n a xs i) (streamGet a ys (subNat i n)));

streamJoin :: (a :: sort 0) -> (n :: Nat)
           -> Stream (Vec (Succ n) a)
           -> (Stream a);
streamJoin a n s =
  MkStream a (\ (i::Nat) ->
     at (Succ n) a (streamGet (Vec (Succ n) a) s ((divModNat i (Succ n)).1))
                   ((divModNat i (Succ n)).2) );

streamSplit :: (a :: sort 0) -> (n :: Nat) -> Stream a -> Stream (Vec n a);
streamSplit a n xs =
  MkStream (Vec n a) (\(i :: Nat) ->
    gen n a (\(j :: Nat) ->
      streamGet a xs (addNat (mulNat i n) j)));

bvStreamGet :: (a :: sort 0) -> (w :: Nat) -> Stream a -> bitvector w -> a;
bvStreamGet a w xs i = streamGet a xs (bvToNat w i);

bvStreamShiftL :: (a :: sort 0) -> (w :: Nat) -> Stream a -> bitvector w -> Stream a;
bvStreamShiftL a w xs i = streamDrop a (bvToNat w i) xs;

bvStreamShiftR :: (a :: sort 0) -> (w :: Nat) -> a -> Stream a -> bitvector w -> Stream a;
bvStreamShiftR a w x xs i = streamAppend a (bvToNat w i) (replicate (bvToNat w i) a x) xs;


--------------------------------------------------------------------------------
-- String values

data String :: sort 0 where { }

--------------------------------------------------------------------------------
-- Floating-point values

data Float :: sort 0 where { }

primitive bvToFloat :: bitvector 32 -> Float;
primitive floatToBV :: Float -> bitvector 32;

data Double :: sort 0 where { }

primitive bvToDouble :: bitvector 64 -> Double;
primitive doubleToBV :: Double -> bitvector 64;


axiom bveq_sameL :: (n :: Nat)
           -> (x z :: bitvector n)
           -> Eq Bool
                 (bvEq n x (bvAdd n x z))
                 (bvEq n (bvNat n 0) z);

axiom bveq_sameR :: (n :: Nat)
           -> (x y :: bitvector n)
           -> Eq Bool
                 (bvEq n (bvAdd n x y) x)
                 (bvEq n y (bvNat n 0));

axiom bveq_same2 :: (n :: Nat)
           -> (x y z :: bitvector n)
           -> Eq Bool
                 (bvEq n (bvAdd n x y) (bvAdd n x z))
                 (bvEq n y z);

axiom bvNat_bvToNat :: (n :: Nat)
              -> (x :: bitvector n)
              -> Eq (bitvector n)
                    (bvNat n (bvToNat n x))
                    x;

axiom ite_split_cong :: (b :: Bool) -> (x :: Vec 384 Bool) -> (y :: Vec 384 Bool)
               -> Eq (Vec 12 (Vec 32 Bool))
                     (split 12 32 Bool (ite (Vec 384 Bool) b x y))
                     (ite (Vec 12 (Vec 32 Bool)) b (split 12 32 Bool x) (split 12 32 Bool y));

axiom ite_join_cong :: (b :: Bool)
              -> (x :: Vec 12 (Vec 32 Bool))
              -> (y :: Vec 12 (Vec 32 Bool))
              -> Eq (Vec 384 Bool)
                    (join 12 32 Bool (ite (Vec 12 (Vec 32 Bool)) b x y))
                    (ite (Vec 384 Bool) b (join 12 32 Bool x) (join 12 32 Bool y));
